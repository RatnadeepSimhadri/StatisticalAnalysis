y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
Sys.time()
time.x <- Sys.time()
p <- as.POSIXlt(time.x)
p
unclass(p)
time.p
time.x
p
unclass(p)
p$mon
p <- as.POSIXlt(time.x)
?POSIXlt
POSIXct(time.x)
POSIXlt(Sys.time())
time.x <- Sys.time()
time.x
plt <- POSIXlt(time.x)
plt <- as.POSIXlt(time.x)
pct <- as.POSIXct(time.x)
plt
pct
unclass(plt)
unclass(plt)
unclass(pct)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
q()
# Script Name:  Ratna_Simhadri_HW05_Script.R
# Location: C:\Academy\Tamu\STAT_604_STAT_COMP_ANA\Assignment5
# Created by: Ratna Deep Simhadri
# Creation Date:  09/22/15
# Purpose: Homework_05 Assignment
# Last executed:  09/23/15
Sys.time()
#1 House Keeping
objects()
rm(list=ls())
#2 Include a line of code to load the HW04 workspace
load("C:\\Academy\\Tamu\\STAT_604_STAT_COMP_ANA\\Assignment4\\HW04.RDATA")
# Show the contents of the workspace
ls()
#3 Create a new data frame of schools containing HS in the name
OklahomaNew <- Oklahoma[grepl(" HS",Oklahoma$School),c(-6,-7,- 12:-14)]
# show the structure of the new data frame
str(OklahomaNew)
#4 Read in zip code database into a data frame for future use
zipcodeDB <- read.csv("C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment5/zip_codes.csv")
# show the structure of the new data frame
str(zipcodeDB)
#5a Create a data frame of Oklahoma zips. Remove PO BOX and Decommisioned zips
OklahomaZips<-zipcodeDB[(zipcodeDB$state == "OK")& !((zipcodeDB$type=="PO BOX")|(as.logical(zipcodeDB$decommissioned))),names(zipcodeDB) %in% c("zip","primary_city","county","estimated_population")]
#5b Change the name of primary_city to MailCity
names(OklahomaZips)<- sub("primary_city","MailCity",names(OklahomaZips))
#5c Change the names of the cities to upper case
OklahomaZips$MailCity <- toupper(OklahomaZips$MailCity)
#5d create a zip3 column using the first 3 digits of the zip code
OklahomaZips$ZipRegion<- substr(OklahomaZips$zip,1,3)
#5e Display information on new data frame
str(OklahomaZips)
OklahomaZips[1:20,]
#6 Merge the zip data with the Oklahoma High School data
OklahomaSchools <- merge(OklahomaNew,OklahomaZips)
dim(OklahomaSchools)
#7 Create a data frame of unduplicated High Schools
unduplicatedDataFrame <- OklahomaSchools[!duplicated(OklahomaSchools$School),]
str(unduplicatedDataFrame)
#8 Display the 25 smallest and largest schools based on number of Teachers
unduplicatedDataFrame[order(unduplicatedDataFrame$Teachers),c("ZipRegion","School","MailCity","County","HSTotal","Teachers")][1:25,]
unduplicatedDataFrame[order(unduplicatedDataFrame$Teachers,decreasing=TRUE),c("ZipRegion","School","MailCity","County","HSTotal","Teachers")][1:25,]
#9 create csv file of schools including zipRegion and system time
cat(paste(paste(unduplicatedDataFrame$School,unduplicatedDataFrame$MailCity,
unduplicatedDataFrame$County,unduplicatedDataFrame$ZipRegion,unduplicatedDataFrame$HSTotal,sep=","),Sys.time(), sep=","),sep="\n",
file="C:/Academy/Tamu/STAT_604_STAT_COMP_ANA/Assignment5/Ratna_Simhadri_HW05.csv")
q()
q()
ls
ls()
getwd()
load("C:\\Academy\\ProgrammingAssignment2\\ProgrammingAssignment2\\cachematrix.R")
# Matrix inversion is usually a costly computation and there may be some benefit
# to caching the inverse of a matrix rather than compute it repeatedly. The
# following two functions are used to cache the inverse of a matrix and display the inverse from cache.
# makeCacheMatrix creates a list containing a function to
# set the value of the matrix
# get the value of the matrix
# set the value of inverse of the matrix
# get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inverseMat <- NULL
set <- function(y) {
x <<- y
inverseMat <<- NULL
}
get <- function() x
setInverse <- function(inverse) inverseMat <<- inverse
getInverse <- function() inverseMat
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
# The following function returns the inverse of the matrix. It first checks if
# the inverse has already been calculated. If so, it gets the result and skips the
# computation. If not, it computes the inverse, sets the value in the cache via
# setInverse function.
cacheSolve <- function(x, ...) {
inverseMat <- x$getInverse()
if(!is.null(inverseMat)) {
message("getting Transpose from Cache")
return(inverseMat)
}
dataMatrix <- x$get()
inverseMat<- solve(dataMatrix )
x$setInverse(inverseMat)
inverseMat
}
x = rbind(c(1, -1/4), c(-1/4, 1))
x
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
x = rbind(c(1,2), c(3,4))
x
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
q()
iris
Sepal.Length
attach(iris)
Sepal.Length
q()
v <- 6
if( v%%2==1 & v<=5){
print("Is small")}
test < function(){
y <- 1:10
for(i in y){
if(i >= 6 )
print( cat(i, " Greater than 6"))
else
print(cat(i," Less than 6"))
}
}
test <- function(){
y <- 1:10
for(i in y){
if(i >= 6 )
print( cat(i, " Greater than 6"))
else
print(cat(i," Less than 6"))
}
}
test()
test <- function(){
y <- 1:10
for(i in y){
if(i >= 6 )
cat(i, " Greater than 6")
else
cat(i," Less than 6")
}
}
test()
test <- function(){
y <- 1:10
for(i in y){
if(i >= 6 )
cat(i, " Greater than 6 \n")
else
cat(i," Less than 6 \n")
}
}
test()
i
x
<
x
x <- rnorm(5)
x
mean(X)
sumaary(x)
summary(x)
set.seed(9182012)
rnorm(3)
rnorm(3)
set.seed(9182012)
rnorm(3)
?rep
(rep(0:1000))
x<- rep(0,1000)
x
q()
set.seed(20)
x<- rnorm(100)
x
e <- rnorm(100,0,2)
e
y<- 0.5+2*x+e
summary(y)
plot(x,y)
set.seed(10)
x<- rbinom(100,1,0.5)
x
e<-rnorm(100,0,2)
y<- 0.5 +2*x+e
plot(x,y)
sample(1:10)
System.time()
system.time()
system.time(2+3)
system.time(readLines("http://www.jhsph.edu")
)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(x,y)
q()
runif(50,-4,4)
set.seed(100)
runif(50,-4,4)
set.seed(100)
ubt <- runif(50,-4,4)
ubt
hist(ubt)
mean(ubt)
sd(ubt)
hist(rnorm(50))
dnorm(rnorm(50))
plot(dnorm(rnorm(50)))
plot(rnorm(50),dnorm(rnorm(50)))
x <- seq(1:20,.2)
x <- seq(1,20,.2)
x
dgd <- dgamma(x,1,1,col="red")
dgd <- dgamma(x,1,scale=1)
plot(x,dgd,thpe='l',col='red')
plot(x,dgd,type='l',col='red')
dgd2 <- dgamma(x,2,scale=1)
plot(x,dgd2,type='l',col='blue')
dgd2 <- dgamma(x,2,scale=2)
plot(x,dgd2,type='l',col='blue')
sample(1:10)
sample(1:10,3)
q()
package(datasets)
Package(datasets)
library()
example(apply)
ls()
class(cacheSolve)
class(OklahomaNew)
mode(OklahomaNew)
e
class(e)
mode(e)
m
z
z <- 1:10
class(z)
mode(z)
name <- "Ratna"
class(name)
mode(name)
name <- c("R","A")
name
mode(name)
class(name)
z <- 1+2i
z
class(z)
mode(z)
mode()
?mode
q()
ceil(5/3)
x <- 1:10-1
x
# What ever
q()
getwd("C:\\Academy\\Learn\\DS_and_Modeling")
setwd("C:\\Academy\\Learn\\DS_and_Modeling")
getwd()
ls()
oklahoma
Oklahoma
str(Oklahoma)
class(Oklahoma)
ls()
Oklahomazips
OklahomaZips
class(OklahomaZips)
rm(ls())
rm(l=ls())
ls()
rm(ma)
rm(s<-ls())
s<-ls()
s
rm(s)
e
m
rm(objects())
rm("objects()")
??rm
?rm
rm(list=ls())
my_list  <- list(22,"Ratna",2+3i)
my_list
my_list[[3]]
my_list[3]
data.frame(nos=c(1:3),names=("Ratna","PD","Danny"))
data.frame(nos=c(1:3) names=("Ratna","PD","Danny"))
data.frame(nos=c(1:3) name=("Ratna","PD","Danny"))
data.frame(nos=c(1:3) name=c("Ratna","PD","Danny"))
data.frame(nos=c(1:3) ,name=c("Ratna","PD","Danny"))
df<-data.frame(nos=c(1:3) ,name=c("Ratna","PD","Danny"))
df
class(df)
str(df)
dim(df)
colnames(df)
attributes(df)
names(df)
names(df)<- c("ID", "NAME")
df
df[3,2]<- "Dinesh"
str(df)
ms <-NA
is.na(ms)
is.missing(ms)
is.NaN(ms)
is.nan(ms)
df[1:2,2]<- NA
df
df<- data.frame(ID=c(1:3),NAME=c("A","B","C"))
df
df[c(1:2),2]<- NA
df
df[1:2,2]<- NA
df
is.na(f)
is.na(df)
df[!complete.cases(df),]
df[complete.cases(df),]
df<- data.frame(ID=c(1:3),NAME=c(10,11,12))
df[1:2,2]<- NA
df
mean(df$NAME)
??mean
?mean
mean(df$NAME, na.rm=T)
df
new_df <-na.omit(df)
new_df
if(T)
print("howdy")
if(F)
print("Watever")
while(i in 1:5)
while(i in 1:5):
while(i in c(1:5)
if(F)
print ("Whatever") else print("hurray")
if(F){}
if(F){}
if(F){
print("False")
} else {
print("True")
}
for(i in 1:4)
print(i)
library()
instal.package
install.package("data.table")
install.packages("data.table")
library()
library("data.table")
??data.table
install.packages("swirl")
??swirl
library("swirl")
swirl()
ls()
bye()
bye()
ls()
new_df
getwd()
setwd("C:\\Academy\\Learn\\DS_and_Modeling\\'Big Mart Sales Prediction'")
setwd("C:\\Academy\\Learn\\DS_and_Modeling\\Big Mart Sales Prediction")
getwd()
train <-read.csv("train.csv")
train
desc(train)
str(train)
dim(train)
test<- read.csv("test")
test<- read.csv("test.csv")
test
dim(test)
ls()
rm(list=c(df,i,ms,my_list))
rm(list=df)
rm(df)
rm(c(i,ms))
?rm
ls()
rm(i ms my_list)
rm(i, ms, my_list)
rm(new_df)
table(is.na(train))
table(is.na(test))
is.na(train)
?table
str(train)
table(train$Outlet_Location_Type)
table(is.na(train))
?colsums
?colSums
colSums(is.na(train))
colsums(train)
colSums(train)
is.na(train)
colSums(train)
colSums(is.na(train))
sum(train)
summary(train)
summary(train)
?plot
?pdf
pdf(file="Products Sales Analysis")
pdf(file="Products_Sales_Analysis.pdf")
?ggplot
??ggplot
ggplot(train,aes(x=Item_Visibility,y=Item_Outlet_Sales))
install.packages("ggplot")
install.packages("ggplot2")
?ggplot
??ggplot
ggplot(train,aes(x=Item_Visibility,y=Item_Outlet_Sales))
ggplot(train, aes(x= Item_Visibility, y = Item_Outlet_Sales)) +
geom_point(size = 2.5, color="navy") + xlab("Item Visibility") + ylab("Item Outlet Sales") + ggtitle("Item Visibility vs Item Outlet Sales")
ggplot2(train, aes(x= Item_Visibility, y = Item_Outlet_Sales)) +
;
ggplot2(train, aes(x= Item_Visibility, y = Item_Outlet_Sales)) +
geom_point(size = 2.5, color="navy") + xlab("Item Visibility") + ylab("Item Outlet Sales") + ggtitle("Item Visibility vs Item Outlet Sales")
ggplot(train, aes(x= Item_Visibility, y = Item_Outlet_Sales)) +
geom_point(size = 2.5, color="navy") + xlab("Item Visibility") + ylab("Item Outlet Sales") + ggtitle("Item Visibility vs Item Outlet Sales")
library("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
libraries()
library()
install.packages("ggplot2")
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
library()
library(ggplot2)
install.packages(c("digest", "KernSmooth", "manipulate", "rJava", "stringi"))
install.packages("ggplot2")
install.packages("ggplot2",dep=T)
?ggplot2
??ggplot2
install.packages("ggplot2",dep=T)
install.packages("ggplot2", dependencies = TRUE, repos = "http://cran.rstudio.com/")
repos
install.packages("ggplot2",dep=T)
library("ggplot2")
ggplot(train, aes(x= Item_Visibility, y = Item_Outlet_Sales)) +
geom_point(size = 2.5, color="navy") + xlab("Item Visibility") + ylab("Item Outlet Sales") + ggtitle("Item Visibility vs Item Outlet Sales")
ggplot(train, aes(x= train$Item_Visibility, y = train$Item_Outlet_Sales)) +
geom_point(size = 2.5, color="navy") + xlab("Item Visibility") + ylab("Item Outlet Sales") + ggtitle("Item Visibility vs Item Outlet Sales")
?ggplot
ggplot(train, aes(x= train$Item_Visibility, y = train$Item_Outlet_Sales)) + geom_point(size = 2.5, color="navy") + xlab("Item Visibility") + ylab("Item Outlet Sales") + ggtitle("Item Visibility vs Item Outlet Sales")
ggplot(train, aes(x= Item_Visibility, y = Item_Outlet_Sales)) + geom_point(size =
2.5, color="navy") + xlab("Item Visibility") + ylab("Item Outlet Sales") +
ggtitle("Item Visibility vs Item Outlet Sales")
ggplot(train, aes(Outlet_Identifier, Item_Outlet_Sales)) + geom_bar(stat =
"identity", color = "purple") +theme(axis.text.x = element_text(angle = 70, vjust =
0.5, color = "black")) + ggtitle("Outlets vs Total Sales") + theme_bw()
